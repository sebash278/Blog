<%- include("partials/header.ejs") %>

  <div class="hero">
    <h1 class="typing-title">
      <span class="typing-text" data-text="Bienvenido al Blogsini"></span>
      <span class="typing-cursor">|</span>
    </h1>
    <p class="hero-subtitle">Escribe lo que quieras mirey</p>
    <a href="#posts-section" class="hero-cta">
            <span>Mira los últimos posts</span>
            <svg class="hero-cta-arrow" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path d="m6 9 6 6 6-6"/>
            </svg>
    </a>
  </div>

<div class="container">
  <div class="posts-container" id="posts-section">
    <% if (posts.length > 0) { %> <% posts.forEach(post => { %>
    <article class="post-card">
      <div class="post-image">
        <img src="https://picsum.photos/400/200?random=<%= post.id %>" alt="<%= post.title %>">
      </div>
      <div class="post-header">
        <a href="/post/<%= post.id %>"
          ><h2 class="post-title"><%= post.title %></h2></a
        >
        <div class="post-meta">
          <span class="author"> <%= post.author %> </span>
          <span class="separator">•</span>
          <span class="date"> <%= post.date %> </span>
        </div>
      </div>
      <div class="post-content">
        <p><%= post.content.substring(0, 150) %>...</p>
        <a href="/post/<%= post.id %>" class="read-more">Leer más</a>
      </div>
      <div class="post-actions">
        <% if (user) { %>
          <button class="like-btn" onclick="toggleLike(this)" data-post-id="<%= post.id %>">
            <svg class="heart" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
            </svg>
            <span class="like-count"><%= post.likes || 0 %></span>
          </button>
        <% } else { %>
          <div class="like-display">
            <svg class="heart" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
            </svg>
            <span><%= post.likes || 0 %></span>
          </div>
        <% } %>
      </div>
    </article>
    <% }); %> <% } else { %>
    <div class="no-posts">
      <h3>No hay posts aún</h3>
      <p>¡Sé el primero en crear uno!</p>
      <a href="/create" class="btn btn-primary">Crear mi primer post</a>
    </div>
    <% } %>
  </div>
</div>

<script>

// window.addEventListener('beforeunload', function() {
//     window.scrollTo(0, 0);
// });

// window.addEventListener('load', function() {
//     window.scrollTo(0, 0);
// });


document.addEventListener('DOMContentLoaded', function() {
    
    const typingElement = document.querySelector('.typing-text');
    const cursorElement = document.querySelector('.typing-cursor');
    
    if (typingElement && cursorElement) {
        const text = typingElement.dataset.text;
        let index = 0;
        
        typingElement.textContent = '';

        function typeWriter() {
            if (index < text.length) {
                typingElement.textContent += text.charAt(index);
                index++;
                
                const speed = Math.random() * 100 + 50; 
                setTimeout(typeWriter, speed);
            } else {
                
                cursorElement.style.animation = 'blink 1s infinite';
            }
        }

        setTimeout(typeWriter, 1000);
    }

    const heroCtaLink = document.querySelector('.hero-cta');
    
    if (heroCtaLink) {
        heroCtaLink.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
                smoothScrollTo(targetElement);
            }
        });
    }
    
    function smoothScrollTo(element) {
        const targetPosition = element.getBoundingClientRect().top + window.pageYOffset;
        const startPosition = window.pageYOffset;
        const distance = targetPosition - startPosition;
        const duration = 1000;
        let start = null;
        
        function easeInOutCubic(t) {
            return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
        }
        
        function animation(currentTime) {
            if (start === null) start = currentTime;
            const timeElapsed = currentTime - start;
            const progress = Math.min(timeElapsed / duration, 1);
            const easedProgress = easeInOutCubic(progress);
            const currentPosition = startPosition + (distance * easedProgress);
            
            window.scrollTo(0, currentPosition);
            
            if (timeElapsed < duration) {
                requestAnimationFrame(animation);
            } else {
                element.style.transform = 'scale(1.02)';
                element.style.transition = 'transform 0.3s ease';
                
                setTimeout(() => {
                    element.style.transform = 'scale(1)';
                }, 300);
            }
        }
        
        requestAnimationFrame(animation);
    }
    
});

  function toggleLike(button) {
    const likeCount = button.querySelector('.like-count');
    const currentCount = parseInt(likeCount.textContent);
    
    if (button.classList.contains('liked')) {
      button.classList.remove('liked');
      likeCount.textContent = currentCount - 1;
    } else {
      button.classList.add('liked');
      likeCount.textContent = currentCount + 1;
    }
  }

async function toggleLike(button) {
  const postId = button.dataset.postId;
  const likeCount = button.querySelector('.like-count');
  const isLiked = button.classList.contains('liked');
  
  console.log('Estado actual - isLiked:', isLiked); // Para debug
  console.log('Acción a realizar:', isLiked ? 'unlike' : 'like'); // Para debug
  
  try {
    // ✅ CORREGIDO: La lógica está bien, pero vamos a debuggear
    const action = isLiked ? 'unlike' : 'like';
    const url = `/api/${action}/${postId}`;
    
    console.log('URL de la petición:', url); // Para debug
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log('Respuesta del servidor:', data); // Para debug
    
    if (response.ok) {
      // Actualizar UI
      likeCount.textContent = data.likes;
      
      if (isLiked) {
        button.classList.remove('liked');
        console.log('Like removido'); // Para debug
      } else {
        button.classList.add('liked');
        console.log('Like añadido'); // Para debug
      }
    } else if (response.status === 401) {
      console.log('Error 401 - No autorizado'); // Para debug
      alert('Debes iniciar sesión para dar like');
      window.location.href = '/login';
    } else {
      console.error('Error del servidor:', data.error);
      alert(data.error || 'Error al procesar like');
    }
  } catch (error) {
    console.error('Error de red:', error);
    alert('Error de conexión');
  }
}
</script>
<%- include("partials/footer.ejs") %>
